version: '3.8'

networks: 
  eng-soft-dev:
  kong-net:
  keycloak-net:

volumes:
  postgres_data:
  mongo_data:
  kong-datastore:
  keycloak-datastore:  
  swagger_data:  # Adicione um volume para o Swagger, se necessário

services:
  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: cqrs_db
    ports:
      - "6543:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "admin"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - eng-soft-dev

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5673:5672"  # Porta para o cliente
      - "15673:15672"  # Porta para o painel de gerenciamento
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 30s
      timeout: 30s
      retries: 10 
    networks:
      - eng-soft-dev  

  mongodb:
    image: mongo
    container_name: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123
    ports:
      - "37017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - eng-soft-dev

  app:
    build:
      context: .
      dockerfile: Dockerfile.app
    container_name: app_flask
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: cqrs_db
      MONGO_HOST: mongodb
      MONGO_PORT: 27017
      MONGO_USER: admin
      MONGO_PASSWORD: admin123
      MONGO_DB_NAME: cqrs_db
      MONGO_COLLECTION_NAME: produtos
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: guest
      RABBITMQ_PASSWORD: guest
      IS_DOCKER: true
    ports:
      - "7000:5000"
    depends_on:
      rabbitmq:
        condition: service_started
      mongodb:
        condition: service_started
      postgres:
        condition: service_healthy
    volumes:
      - ./swagger:/app/swagger  # Certifique-se de que o Swagger está sendo copiado corretamente
    networks:
      - eng-soft-dev        

  consumidor_eventos:
    build:
      context: .
      dockerfile: Dockerfile.app
    container_name: consumidor_eventos
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_started
      app:
        condition: service_started
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: guest
      RABBITMQ_PASSWORD: guest
      MONGO_HOST: mongodb
      MONGO_PORT: 27017
      MONGO_USER: admin
      MONGO_PASSWORD: admin123
      MONGO_DB_NAME: cqrs_db
      MONGO_COLLECTION_NAME: produtos
    command: python /app/camada_servico/consumidor_eventos.py
    networks:
      - eng-soft-dev

  kong-db:
    image: postgres:9.6
    volumes:
      - kong-datastore:/var/lib/postgresql/data
    networks:
      - kong-net
    ports:
      - "5435:5432"
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
    restart: always
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 5s
      timeout: 5s
      retries: 5

  kong-migration:
    build: 
      context: .
      dockerfile: ./Dockerfile.kong
    command: "kong migrations bootstrap"
    networks:
      - kong-net
    restart: on-failure
    environment:
      KONG_PG_HOST: kong-db
      KONG_PG_PASSWORD: kong
    depends_on:
      - kong-db

  kong:
    build: 
      context: .
      dockerfile: ./Dockerfile.kong
    restart: always
    networks:
      - kong-net
    environment:
      KONG_PG_HOST: kong-db
      KONG_PG_PASSWORD: kong
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_PROXY_LISTEN_SSL: 0.0.0.0:8443
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_PLUGINS: bundled,oidc
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
    depends_on:
      - kong-db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://kong:9011"]
      interval: 5s
      timeout: 2s
      retries: 15
    ports:
      - "9000:8000" # Listener
      - "9011:8001" # Admin API
      - "9443:8443" # Listener  (SSL)
      - "9444:8444" # Admin API (SSL)

  konga:
    image: pantsel/konga
    restart: always
    networks:
      - kong-net
    environment:
      TOKEN_SECRET: fiaptoken
    depends_on:
      - kong
    healthcheck:
      test: ["CMD", "curl", "-f", "http://kong:8001"]
      interval: 5s
      timeout: 2s
      retries: 15
    ports:
      - "31337:1337"

  keycloak-db:
    image: postgres:9.6
    volumes: 
      - keycloak-datastore:/var/lib/postgresql/data
    networks:
      - keycloak-net
    ports:
      - "25434:5432"
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
    restart: always
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "keycloak"]
      interval: 5s
      timeout: 5s
      retries: 5

  keycloak:
    image: quay.io/keycloak/keycloak:25.0
    depends_on:
      - keycloak-db
    networks:
      - keycloak-net
    ports:
      - "8180:8080"
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak-db/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak      
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HEALTH_ENABLED: true
      KC_METRICS_ENABLED: true
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://keycloak:8080"]
      interval: 5s
      timeout: 2s
      retries: 15
    command:
      - start-dev
